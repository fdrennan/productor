version: '3.4'
services:
  productor_webserver:
    image: fdrennan/productor_rpy:dev
    restart: always
    depends_on:
      - productor_initdb
    env_file: .env
    environment:
      AIRFLOW_HOME: /root/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@172.17.0.1:5439/airflow
    volumes:
      - ./airflow/airflow.cfg:/root/airflow/airflow.cfg
      - ./airflow/dags:/root/airflow/dags
      - ./airflow/plugins:/root/airflow/plugins
      - productor_airflow_logs:/root/airflow/logs
    ports:
      - "8080:8080"
    command: airflow webserver
  productor_postgres:
    image: postgres:12.3
    restart: always
    environment:
      - POSTGRES_USER=${AIRFLOW_USER}
      - POSTGRES_PASSWORD=${AIRFLOW_PASSWORD}
      - POSTGRES_DB=${AIRFLOW_DB}
    ports:
      - 5439:5432
    volumes:
      - airflow_postgres:/var/lib/postgresql/data
  productor_initdb:
    image: fdrennan/productor_rpy:dev
    restart: always
    depends_on:
      - productor_postgres
    env_file: .env
    environment:
      AIRFLOW_HOME: /root/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@172.17.0.1:5439/airflow
    command: airflow initdb
  productor_scheduler:
    image: fdrennan/productor_rpy:dev
    restart: always
    depends_on:
      - productor_webserver
    env_file: .env
    environment:
      AIRFLOW_HOME: /root/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@172.17.0.1:5439/airflow
    volumes:
      - ./airflow/airflow.cfg:/root/airflow/airflow.cfg
      - ./airflow/dags:/root/airflow/dags
      - ./airflow/scripts:/home/scripts
      - ./airflow/plugins:/root/airflow/plugins
      - ./.env:/root/.Renviron
      - productor_airflow_logs:/root/airflow/logs
    command: airflow scheduler
  web:
    restart: always
    image: nginx
    volumes:
     - ./nginx/nginx.conf:/etc/nginx/conf.d/mysite.template
     - ./productor_blog/public:/usr/share/nginx/html
    ports:
     - "80:80"
    environment:
     - NGINX_HOST=172.17.0.1
     - NGINX_PORT=80
     - NGINX_HOST_NAME=192.168.0.33
    command: /bin/bash -c "envsubst '$$NGINX_HOST_NAME' < /etc/nginx/conf.d/mysite.template > /etc/nginx/nginx.conf && exec nginx -g 'daemon off;'"
  api_one:
    image: fdrennan/productor_api:dev
    command: /app/plumber.R
    restart: always
    ports:
     - "8002:8000"
    working_dir: /app
    volumes:
      - ./.env:/app/.Renviron
      - ./plumber_api/plumber.R:/app/plumber.R
      - ./plumber_api/notebooks:/app/notebooks
  api_two:
    image: fdrennan/productor_api:dev
    command: /app/plumber.R
    restart: always
    ports:
     - "8003:8000"
    working_dir: /app
    volumes:
      - ./.env:/app/.Renviron
      - ./plumber_api/plumber.R:/app/plumber.R
      - ./plumber_api/notebooks:/app/notebooks
  api_three:
    image: fdrennan/productor_api:dev
    command: /app/plumber.R
    restart: always
    ports:
     - "8004:8000"
    working_dir: /app
    volumes:
      - ./.env:/app/.Renviron
      - ./plumber_api/plumber.R:/app/plumber.R
      - ./plumber_api/notebooks:/app/notebooks
  api_four:
    image: fdrennan/productor_api:dev
    command: /app/plumber.R
    restart: always
    ports:
     - "8005:8000"
    working_dir: /app
    volumes:
      - ./.env:/app/.Renviron
      - ./plumber_api/plumber.R:/app/plumber.R
      - ./plumber_api/notebooks:/app/notebooks
  api_five:
    image: fdrennan/productor_api:dev
    command: /app/plumber.R
    restart: always
    ports:
     - "8006:8000"
    working_dir: /app
    volumes:
      - ./.env:/app/.Renviron
      - ./plumber_api/plumber.R:/app/plumber.R
      - ./plumber_api/notebooks:/app/notebooks
  productor_db:
    image: postgres:12.3
    container_name: "productor_postgres"
    restart: always
    ports:
      - '5432:5432'
    expose:
      # Opens port 5432 on the container
      - '5432'
      # Where our data will be persisted
    env_file: .env
    volumes:
      - productor_postgres_volume:/var/lib/postgresql/data
      - ./postgres/postgres_backup:/postgres_backup
    environment:
      - POSTGRES_USER=${PRODUCTOR_POSTGRES_USER}
      - POSTGRES_PASSWORD=${PRODUCTOR_POSTGRES_PASSWORD}
      - POSTGRES_DB=${PRODUCTOR_POSTGRES_DB}
  shiny:
    container_name: productor_app
    image: fdrennan/productor_app:dev
    restart: always
    user: 'root'
    # Uncomment the lines below to disable application logs STDOUT output
    # environment:
    #   - APPLICATION_LOGS_TO_STDOUT=false
    ports:
      - '3000:3838'
    volumes:
      - './shiny/shiny-server.conf:/etc/shiny-server/shiny-server.conf'
      - './shiny/app.R:/app/app.R'
      - './.env:/app/.Renviron'
  rstudio:
    environment:
      - USER=${RSTUDIO_USER}
      - PASSWORD=${RSTUDIO_PW}
    image: "rocker/verse:latest"
    ports:
     - 8787:8787
     
volumes:
  productor_volume: {}
  airflow_postgres:
  productor_airflow_logs:
  productor_postgres_volume:
